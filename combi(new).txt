	lw	0	1	nn	//$1 = n
	lw	0	2	rr	//$2 = r
	lw	0	6	combi	//$6 = comb
	jalr	6	5		//call combi(n ,r)
	halt
comb	beq	0	2	end	//if(r=0 || n=r) jump to end
	beq	1	2	end
	lw	0	4	one	//$4 = 1
	add	7	4	7	//increse stack
	sw	7	1	stack	//save n in stack
	add	7	4	7	//increse stack
	sw	7	2	stack	//save r in stack
	add	7	4	7	//increse stack
	sw	7	5	stack	//save return address
	lw	0	4	neg	//$4 = -1
	add	1	4	1	//n = n-1
	jalr	6	5		//call combi(n-1 ,r)
	lw	0	4	one	//$4 = 1
	add	7	4	7	//increase stack
	sw	7	3	stack	//save value from combi(n-1 ,r)
	lw	0	4	neg	//$4 = -1
	add	2	4	2	//r = r-1
	lw	0	4	one	//$4 = 1
	jalr	6	5		//call combi(n-1 ,r-1)
	lw	7	4	stack	//$4 = value from combi(n-1 ,r)
	add	3	4	3	//$3 = combi(n-1 ,r) + combi(n-1 ,r-1)
	lw	0	4	neg	//$4 = -1
	add	7	4	7	//decrease stack
	lw	7	5	stack	//restore return address
	add	7	4	7	//decrease stack
	lw	7	2	stack	//restore r
	add	7	4	7	//decrease stack
	lw	7	1	stack	//restore n
	add	7	4	7	//decrease stack
	jalr	5	4		//jump back
end	lw	0	3	one	//return 1
	jalr	5	4		//jump back
nn	.fill	5
rr	.fill	3
combi	.fill	comb
one	.fill	1
neg	.fill	-1
stack	.fill	0